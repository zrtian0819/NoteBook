[
  [
    { "title": "01_HTML知識點筆記🚧" },
    {
      "tag": "h2",
      "text": "HTML基礎程式碼結構",
      "style": "",
      "class": ""
    },
    {
      "tag": "p",
      "text": "HTML相當於網頁的骨架。以下為HTML最簡易的結構，其中<head></head>標籤內放置網頁中不會被顯示的重要資訊；<body></body>內則放置顯示於頁面的物件；<script></script>內則放置JavaScript程式碼。",
      "style": "",
      "class": ""
    },
    {
      "tag": "precode",
      "text": "<html>\n<head>\n<meta charset='utf-8'/>   <!--以utf-8編碼-->\n<title>人天的網頁</title>\n\n<style>\n<!--這裡放CSS-->\n</style>\n\n</head>\n<body>\n<h1></h1>\n<div></div>\n\n<script>\n<!--這裡放Javascript-->\n</script>\n</body>\n</html>",
      "style": "",
      "class": ""
    },
    {
      "tag": "h2",
      "text": "引入CSS的方法",
      "style": "",
      "class": ""
    },
    {
      "tag": "p",
      "text": "將以下語句放入<meta></meta>則可匯入CSS，其中style.css是要匯入的檔名。",
      "style": "",
      "class": ""
    },
    {
      "tag": "precode",
      "text": "<link rel='stylesheet' href='style.css'>",
      "style": "",
      "class": ""
    },
    {
      "tag": "h2",
      "text": "引入JavaScript的方法",
      "style": "",
      "class": ""
    },
    {
      "tag": "p",
      "text": "將以下語句放入<body></body>標籤內的最下方可以引入Js，其中js/all.js是要匯入的檔名。",
      "style": "",
      "class": ""
    },
    {
      "tag": "precode",
      "text": "<script src='js/all.js'></script>",
      "style": "",
      "class": ""
    },
    {
      "tag": "h2",
      "text": "語意標籤",
      "style": "",
      "class": ""
    },
    {
      "tag": "p",
      "text": "語意標籤與<div></div>標籤的功能相同，\n但能讓使用者或與人協作時能更加容易辨識區塊中所放的內容為何。",
      "style": "",
      "class": ""
    },
    {
      "tag": "precode",
      "text": "<header>放頁首、上方板塊、通常包含標題</header>",
      "style": "",
      "class": ""
    },
    {
      "tag": "precode",
      "text": "<nav>選單、導覽、常用於menu</nav>",
      "style": "",
      "class": ""
    },
    {
      "tag": "precode",
      "text": "<main>主要內容的區塊</main>",
      "style": "",
      "class": ""
    },
    {
      "tag": "precode",
      "text": "<aside>側欄、附加內容、廣告、非主要資訊</aside>",
      "style": "",
      "class": ""
    },
    {
      "tag": "precode",
      "text": "<article>文章內容</article>",
      "style": "",
      "class": ""
    },
    {
      "tag": "precode",
      "text": "<section>自訂的區塊，例如數篇摘要要組成的空間</section>",
      "style": "",
      "class": ""
    },
    {
      "tag": "precode",
      "text": "<mark>強調的內容區塊，像是螢光筆的部分</mark>",
      "style": "",
      "class": ""
    },
    {
      "tag": "precode",
      "text": "<time>顯示時間的區塊</time>",
      "style": "",
      "class": ""
    },
    {
      "tag": "precode",
      "text": "<details>定義可查看額外細節的部份</details>",
      "style": "",
      "class": ""
    },
    {
      "tag": "precode",
      "text": "<footer>頁尾，網頁最底部的區塊</footer>",
      "style": "",
      "class": ""
    },
    {
      "tag": "h2",
      "text": "錨點",
      "style": "",
      "class": ""
    },
    {
      "tag": "p",
      "text": "HTML中的錨點（Anchor）用法允許您在同一頁面內或不同頁面之間創建超連結，直接跳轉到指定的位置。這在長頁面或文檔中非常有用，可以快速導航到感興趣的部分。以下是HTML錨點的基本用法：",
      "style": "",
      "class": ""
    },
    {
      "tag": "precode",
      "text": "<!--使用id創建錨點-->\n<h2 id='section1'>第一節</h2>\n\n<!--使用a標籤創建錨點的超連結-->\n<a href='#section1'>跳轉到第一節</a>\n\n\n<!--跨頁面的跳轉-->\n<a href='page2.html#section1'>前往第二頁的第一節</a>",
      "style": "",
      "class": ""
    },
    {
      "tag": "h2",
      "text": "表格的製作",
      "style": "",
      "class": ""
    },
    {
      "tag": "p",
      "text": "以下是表格標籤所代表的意義：",
      "style": "",
      "class": ""
    },
    {
      "tag": "precode",
      "text": "<table> <!-- 定義整個表格 -->\n<tr> <!-- table row -->\n<th> <!-- table heading -->\n<td> <!-- table data -->",
      "style": "",
      "class": ""
    },
    {
      "tag": "p",
      "text": "<thead>標籤代表表頭，<tbody>代表表身，<tfoot>代表表尾。",
      "style": "",
      "class": ""
    },
    {
      "tag": "precode",
      "text": "<table>\n  <thead>\n    <tr>\n      <th colspan=3 >國立故宮博物院</th>  <!-- colspan=3 代表橫跨3欄位的意思 -->\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>所屬部門</th>\n      <th>員額</th>\n      <th>授權法源</th>\n    </tr>\n  </tbody>\n  <tr>\n    <td>行政院</td>\n    <td>502人</td>\n    <td>行政院故宮博物院組織法</td>\n  </tr>\n  <tfoot>\n    \n  </tfoot>\n</table>",
      "style": "",
      "class": ""
    },
    {
      "tag": "img",
      "text": "./img/1_表格範例.png",
      "style": "",
      "class": ""
    },
    {
      "tag": "h2",
      "text": "表單的製作",
      "style": "",
      "class": ""
    },
    {
      "tag": "p",
      "text": "⚠️form中有設定name屬性的資料才會送到後端。",
      "style": "",
      "class": ""
    },
    {
      "tag": "precode",
      "text": "<form action='' method='get' > <!-- 寄送隱密資訊要用POST method='post' 不然預設都是'get' -->\n  <label for='email'>帳號： </label>\n  <input id='email' type='text' name='email' required> <!-- required代表必填否則無法提交 -->\n  \n  <br>\n  <label for='passwords'>密碼： </label>\n  <input id='passwords' type='text' name='passwords' required>\n  \n  <br>\n  <button type='submit'>登入系統</button>\n</form>",
      "style": "",
      "class": ""
    },
    {
      "tag": "img",
      "text": "./img/2_表單範例.png",
      "style": "",
      "class": ""
    }
  ],
  [
    { "title": "02_CSS的知識點筆記🚧" },
    {
      "tag": "p",
      "text": "太過於基礎未來再更新!",
      "style": "",
      "class": ""
    }
  ],
  [{ "title": "03_JavaScript的知識點筆記🚧" }],
  [{ "title": "04_DOM元素的操作🚧" }],
  [{ "title": "05_Version Control🚧" }],
  [{ "title": "06_Ajax🚧" }],
  [{ "title": "07_Vue.js🚧" }],
  [{ "title": "08_React.js🚧" }],
  [
    { "title": "09_Node.js🚧" },
    {
      "tag": "h2",
      "text": "介紹",
      "style": "",
      "class": ""
    },
    {
      "tag": "p",
      "text": "Node.js 是一個開放原始碼且跨平台的 JavaScript 執行環境。它使用 Google Chrome 的核心 V8 JavaScript 引擎，在瀏覽器之外運行，這使得 Node.js 具有非常高的性能。\n\nNode.js 應用程式在單一進程中運行，而不是為每個請求創建新的執行緒。當 Node.js 執行 I/O 操作時，例如從網路讀取、訪問數據庫或文件系統時，Node.js 不會阻塞執行緒並浪費 CPU 週期等待，而是在收到回應後恢復操作。\n\n這使得 Node.js 能夠在單個服務器上處理成千上萬個並行連接，而無需引入管理線程並發的負擔，這可能是錯誤的重要來源。Node.js 具有獨特的優勢，因為數百萬為瀏覽器編寫 JavaScript 的前端開發人員現在能夠撰寫除客戶端代碼外的服務器端代碼，而無需學習完全不同的語言。\n\n在 Node.js 中，可以毫無問題地使用新的 ECMAScript 標準，因為您無需等待所有用戶更新其瀏覽器 - 您可以通過更改 Node.js 版本來決定使用哪個 ECMAScript 版本，您還可以通過運行帶有標誌的 Node.js 來啟用特定的實驗性功能。\n\n一個示例 Node.js 應用程式 Node.js 最常見的示例 Hello World 是一個 Web 服務器。要運行此片段，請將其保存為 server.js 文件，並在終端中運行 node server.js。此代碼首先包含了 Node.js 的 http 模塊。Node.js 擁有一個極好的 標準程式庫 ，包括對網絡的一流支援。http 的 createServer() 方法創建一個新的 HTTP 伺服器並返回它。伺服器被設置為在指定的端口和主機名上監聽。當伺服器準備就緒時，回調函數被調用，這個案例中通知我們伺服器正在運行。每當收到一個新的請求時，將調用 request 事件 ，提供兩個對象：請求（一個 http.IncomingMessage 對象）和回應（一個 http.ServerResponse 對象）。這兩個對象對於處理 HTTP 調用是必不可少的。",
      "style": "",
      "class": ""
    }
  ],
  [
    { "title": "10_Express.js🚧" },
    {
      "tag": "h2",
      "text": "介紹",
      "style": "",
      "class": ""
    },
    {
      "tag": "precode",
      "text": "npm install express",
      "style": "",
      "class": ""
    },
    {
      "tag": "p",
      "text": "Express.js是針對Node.js的應用框架，建構在Node.js之上，其主要目的是為了對Node.js架設的後端伺服器簡化程式碼，並且增加開發速度(叫做Express的原由)。要使用Express，我們只需要在work directory中做以上指令↑",
      "style": "",
      "class": ""
    },

    {
      "tag": "precode",
      "text": "const express = require('express');\nconst app = express( );\n\n\n\n//port, callback\napp.listen(3000, ()=>{\n    console.log('伺服器正在聆聽port 3000...')\n});",
      "style": "",
      "class": ""
    }
  ],
  [{ "title": "11_Restful API🚧" }]
]
